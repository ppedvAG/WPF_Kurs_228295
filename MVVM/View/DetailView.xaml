<Window x:Class="MVVM.View.DetailView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:MVVM.View"
        xmlns:c="clr-namespace:MVVM.Converter"
        xmlns:main="clr-namespace:MVVM"
        xmlns:uc="clr-namespace:Personendatenbank;assembly=Personendatenbank"
        xmlns:vm="clr-namespace:MVVM.ViewModel"
        mc:Ignorable="d"
        Title="Neue Person" 
        SizeToContent="Height" Width="285" ResizeMode="NoResize" 
        WindowStartupLocation="CenterScreen" Topmost="True"
        Style="{StaticResource Sty_Wnd}"
        x:Name="Wnd_DetailView">

    <!--Das zugehörige ViewModel dient dieser Seite als DatenKontext-->
    <Window.DataContext>
        <vm:DetailViewModel/>
    </Window.DataContext>

    <Window.Resources>
        <c:EnumToBoolConverter x:Key="gender2bool"/>

        <x:Array Type="{x:Type Color}" x:Key="usedColors">
            <Color>Green</Color>
            <Color>Red</Color>
            <Color>Blue</Color>
            <Color>Yellow</Color>
            <Color>Orange</Color>
            <Color>Purple</Color>
            <Color>Black</Color>
            <Color>White</Color>
        </x:Array>

        <c:ColorToBrushConverter x:Key="color2brush"/>

        <!--Error-Template für den Fall einer fehlerhaften Eingabe in einzelnen Controls-->
        <ControlTemplate x:Key="CtpError">
            <StackPanel Orientation="Horizontal">
                <Border BorderBrush="Red" BorderThickness="1" x:Name="BdrAep">
                    <AdornedElementPlaceholder x:Name="Aep"/>
                </Border>
                <TextBlock Text="!" Foreground="Red" FontSize="{StaticResource Dbl_Fontsize}"
                           Margin="3,0" FontWeight="Bold" VerticalAlignment="Center"/>
                <Popup AllowsTransparency="True" PopupAnimation="Slide"
                       PlacementTarget="{Binding ElementName=BdrAep}" Placement="Bottom"
                       IsOpen="{Binding ElementName=Aep, Path=AdornedElement.IsMouseOver, Mode=OneWay}">
                    <TextBlock Text="{Binding ElementName=Aep, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"
                               Foreground="White" Background="Red" Padding="2" FontSize="{StaticResource Dbl_Fontsize}"/>
                </Popup>
            </StackPanel>
        </ControlTemplate>

    </Window.Resources>

    <Grid Margin="10">
        <!--Grid-Spalten- und Reihen-Definitionen-->
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!--linke Spalte (nur statische Stringanzeigen)-->
        <TextBlock Text="Vorname:"/>
        <TextBlock Text="Nachname:" 
                   Grid.Row="1"/>
        <TextBlock Text="Geburtsdatum:" 
                   Grid.Row="2"/>
        <TextBlock Text="Verheiratet:" 
                   Grid.Row="3"/>
        <TextBlock Text="Lieblingsfarbe:" 
                   Grid.Row="4"/>
        <TextBlock Text="Geschlecht:" 
                   VerticalAlignment="Top"
                   Grid.Row="5"/>
        <TextBlock Text="Anzahl Kinder:" 
                   Grid.Row="6"/>

        <!--rechte Spalte (Eingabefelder)
        Bindungen erfolgen an Eigenschaften (z.B. Vorname) einer Property (NeuePerson) aus dem DataContext.
        Zur Verwendung des Validierungs-Interfaces wurde ValidatesOnDataErrors gesetzt.-->
        <TextBox x:Name="Tbx_Vorname"
                 Grid.Column="1"
                 Text="{Binding Vorname, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                 Validation.ErrorTemplate="{StaticResource CtpError}"/>

        <TextBox x:Name="Tbx_Nachname"
                 Grid.Column="1" Grid.Row="1"
                 Text="{Binding Nachname, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                 Validation.ErrorTemplate="{StaticResource CtpError}"/>

        <DatePicker x:Name="Dpr_Geburtsdatum"
                    Grid.Column="1" Grid.Row="2"
                    SelectedDate="{Binding Geburtsdatum, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                 Validation.ErrorTemplate="{StaticResource CtpError}"/>

        <CheckBox x:Name="Cbx_Verheiratet"
                  Grid.Column="1" Grid.Row="3"
                  IsChecked="{Binding Verheiratet}"/>

        <ComboBox x:Name="Cbb_Lieblingsfarbe"
                  Grid.Column="1" Grid.Row="4"
                  SelectedItem="{Binding Lieblingsfarbe, ValidatesOnDataErrors=True}"
                  ItemsSource="{StaticResource usedColors}"
                  Validation.ErrorTemplate="{StaticResource CtpError}">
            <ComboBox.ItemTemplate>
                <!--Diese ItemTemplate stellt vor dem entsprechenden Farbnamen ein Recteck in dieser Farbe dar-->
                <DataTemplate DataType="{x:Type Color}">
                    <StackPanel Orientation="Horizontal">
                        <Border BorderBrush="Black" BorderThickness="1" Width="20" Height="20" Margin="5,0">
                            <Rectangle Width="20" Height="20" Fill="{Binding Converter={StaticResource color2brush}}"/>
                        </Border>
                        <TextBlock Text="{Binding}"/>
                    </StackPanel>
                </DataTemplate>
            </ComboBox.ItemTemplate>
        </ComboBox>

        <StackPanel Margin="2"
                    Grid.Column="1" Grid.Row="5">
            <!--Die RadioButtons übermitteln an den Konverter den ihnen zugeteilten Enumerator-Zustand über den 
        ConverterParameter. Dadurch muss der Konverter diese nur noch mit der ausgewählten Eigenschaft vergleichen.-->
            <RadioButton Content="M"
                         GroupName="Rbg_Gender"
                         IsChecked="{Binding Geschlecht, Converter={StaticResource gender2bool}, ConverterParameter={x:Static main:Gender.Männlich}}"/>
            <RadioButton Content="W"
                         GroupName="Rbg_Gender"
                         IsChecked="{Binding Geschlecht, Converter={StaticResource gender2bool}, ConverterParameter={x:Static main:Gender.Weiblich}}"/>
            <RadioButton Content="D"
                         GroupName="Rbg_Gender"
                         IsChecked="{Binding Geschlecht, Converter={StaticResource gender2bool}, ConverterParameter={x:Static main:Gender.Divers}}"/>

        </StackPanel>

        <uc:IntegerUpDown x:Name="Iud_Kinder" 
                             Grid.Row="6" Grid.Column="1" Margin="2"
                             Value="{Binding Kinder, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, ValidatesOnDataErrors=True}"
                             Validation.ErrorTemplate="{StaticResource CtpError}"/>

        <WrapPanel Grid.Row="7" Grid.ColumnSpan="2"
                   HorizontalAlignment="Right" Margin="0,5">
            <!--Den Buttons wird als CommandParameter das Fenster übergeben, damit im ViewModel dessen Close-Befehl verwendet werden kann-->
            <Button x:Name="Btn_Ok"
                    Content="OK"
                    Command="{Binding OkCmd}"
                    CommandParameter="{Binding ElementName=Wnd_DetailView}">
                <!--<Button.Style>
                    <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">

                        <Setter Property="IsEnabled" Value="False"/>

                        <Style.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding ElementName=Tbx_Vorname, Path=(Validation.HasError)}" Value="False"/>
                                    <Condition Binding="{Binding ElementName=Tbx_Nachname, Path=(Validation.HasError)}" Value="False"/>
                                    <Condition Binding="{Binding ElementName=Dpr_Geburtsdatum, Path=(Validation.HasError)}" Value="False"/>
                                    <Condition Binding="{Binding ElementName=Cbb_Lieblingsfarbe, Path=(Validation.HasError)}" Value="False"/>
                                    <Condition Binding="{Binding ElementName=Iud_Kinder, Path=(Validation.HasError)}" Value="False"/>
                                </MultiDataTrigger.Conditions>

                                <Setter Property="IsEnabled" Value="True"/>

                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>-->
            </Button>
            <Button x:Name="Btn_Abbruch"
                    Content="Abbrechen"
                    Command="{Binding AbbruchCmd}"
                    CommandParameter="{Binding ElementName=Wnd_DetailView}"/>
        </WrapPanel>
    </Grid>
</Window>